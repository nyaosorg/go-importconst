package main

import (
	"bufio"
	"errors"
	"flag"
	"fmt"
	"os"
	"os/exec"
	"runtime"
	"strconv"
	"strings"
)

var (
	flagCSrc  = flag.String("csrc", "zconst.cpp", "c-source filename used temporally")
	flagCc    = flag.String("cc", "gcc", "c compiler command")
	flagGoSrc = flag.String("o", "zconst.go", "go-source-filename to output constants")
	flagClean = flag.Bool("c", false, "clean output")
	flagDebug = flag.Bool("d", false, "debug flag")
	flagNofmt = flag.Bool("nofmt", false, "do not execute go fmt (for debug)")
)

var packageName = os.Getenv("GOPACKAGE")

func makeCSource(csrcname string, headers []string, vars []string) {
	fd, err := os.Create(csrcname)
	if err != nil {
		fmt.Fprintf(fd, "%s: can not create %s\n", os.Args[0], csrcname)
		return
	}
	defer fd.Close()

	for _, header1 := range headers {
		fmt.Fprintf(fd, "#include %s\n", header1)
	}
	fmt.Fprint(fd, `
void p(FILE *w,const char *name,const char *s){
	fprintf(w,"const %s = \"%s\"\n",name,s);
}
void p(FILE *w,const char *name,int n){
	fprintf(w,"const %s = %d\n",name,n);
}
void p(FILE *w,const char *name,long n){
	fprintf(w,"const %s = %ld\n",name,n);
}
void p(FILE *w,const char *name,unsigned long n){
	fprintf(w,"const %s = %ld\n",name,n);
}
void p(FILE *w,const char *name,double n){
	fprintf(w,"const %s = %lf\n",name,n);
}

int main(int argc,char **argv)
{
`)
	fmt.Fprintln(fd, `    FILE *w=fopen(argv[1],"wb");`)
	fmt.Fprintln(fd, `    fprintf(w,"package `+packageName+`\n\n");`)
	fmt.Fprintln(fd, `    fprintf(w,"// Code generated by go-importconst DO NOT EDIT.\n");`)

	for _, name1 := range vars {
		fmt.Fprintf(fd, "    p(w,\"%s\",%s);\n", name1, name1)
	}
	fmt.Fprintln(fd, "    fclose(w);")
	fmt.Fprintln(fd, "    return 0;")
	fmt.Fprintln(fd, "}")
}

func compile() error {
	var cc exec.Cmd
	cc.Args = []string{
		*flagCc,
		*flagCSrc,
	}
	fn, err := exec.LookPath(*flagCc)
	if err != nil {
		return err
	}
	cc.Path = fn
	cc.Stdout = os.Stdout
	cc.Stderr = os.Stderr
	fmt.Fprintln(os.Stderr, cc.Path, *flagCSrc)
	return cc.Run()
}

func nameOfExecutable() string {
	if runtime.GOOS == "windows" {
		return ".\\a.exe"
	} else {
		return "./a.out"
	}
}

func callAOut(gosrc string) (string, error) {
	fname := nameOfExecutable()
	cmd := exec.Cmd{
		Args:   []string{fname, gosrc},
		Path:   fname,
		Stdout: os.Stdout,
		Stderr: os.Stderr,
	}
	fmt.Fprintln(os.Stderr, fname, gosrc)
	return fname, cmd.Run()
}

func gofmt() error {
	if *flagNofmt {
		return nil
	}
	var gofmt exec.Cmd
	gofmt.Args = []string{
		"go",
		"fmt",
		*flagGoSrc,
	}
	fn, err := exec.LookPath("go")
	if err != nil {
		return err
	}
	gofmt.Path = fn
	gofmt.Stdout = os.Stdout
	gofmt.Stderr = os.Stderr
	fmt.Fprintln(os.Stderr, fn, "fmt", *flagGoSrc)
	return gofmt.Run()
}

func readGoGenerateParameter() ([]string, error) {
	gofile := os.Getenv("GOFILE")
	if gofile == "" {
		return nil, errors.New("$GOFILE is not defined. Use `go generate`")
	}
	fd, err := os.Open(gofile)
	if err != nil {
		return nil, err
	}
	goline := os.Getenv("GOLINE")
	if goline == "" {
		return nil, errors.New("$GOLINE is not defined. Use `go generate`")
	}
	lnum, err := strconv.Atoi(goline)
	if err != nil {
		return nil, fmt.Errorf("$GOLINE: %s", err.Error())
	}
	sc := bufio.NewScanner(fd)
	var tokens []string
	for sc.Scan() {
		lnum--
		if lnum >= 0 {
			continue
		}
		text := sc.Text()
		if !strings.HasPrefix(text, "//") {
			break
		}
		fields := strings.Fields(text[2:])
		if len(fields) <= 0 {
			break
		}
		for _, arg1 := range fields {
			tokens = append(tokens, arg1)
		}
	}
	return tokens, nil
}

func remove(fn string) {
	fmt.Fprintln(os.Stderr, "rm", fn)
	os.Remove(fn)
}

func main1() error {
	if *flagClean {
		remove(*flagCSrc)
		remove(nameOfExecutable())
		remove(*flagGoSrc)
		return nil
	}
	goParams, err := readGoGenerateParameter()
	if err != nil {
		return err
	}
	headers := []string{"<cstdio>"}
	vars := make([]string, 0)
	for _, s := range goParams {
		if len(s) > 0 && s[0] == '<' {
			headers = append(headers, s)
		} else if strings.HasSuffix(s, ".h") {
			headers = append(headers, fmt.Sprintf(`"%s"`, s))
		} else {
			vars = append(vars, s)
		}
	}

	makeCSource(*flagCSrc, headers, vars)

	if !*flagDebug {
		defer remove(*flagCSrc)
	}

	err = compile()
	if err != nil {
		return err
	}
	fname, err := callAOut(*flagGoSrc)
	if err != nil {
		return err
	}
	remove(fname)
	err = gofmt()
	if err != nil {
		return err
	}
	return nil
}

func main() {
	flag.Parse()
	if err := main1(); err != nil {
		fmt.Fprintln(os.Stderr, err)
		return
	}
}
